// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ============================================================================
// Neural Identity (Artist DNA)
// ============================================================================

model ArtistDNA {
  id        String   @id @default(uuid())
  name      String
  bio       String

  // Creative Style (JSON)
  visualThemes   String // JSON array
  musicGenres    String // JSON array
  writingStyle   String
  colorPalette   String // JSON array

  // Communication Style
  tone               String // CommunicationTone enum
  emojiUsage         String // EmojiUsage enum
  responseLength     String // ResponseLength enum
  languagePreferences String // JSON array

  // Values
  coreValues                  String // JSON array
  artisticVision              String
  fanRelationshipPhilosophy   String

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  // Relations
  milestones        Milestone[]
  contents          Content[]
  distributions     Distribution[]
  socialConnections SocialConnection[]
  socialPosts       SocialPost[]
  rights            Right[]
  infringements     Infringement[]
  monitoringRules   MonitoringRule[]
  creativeSessions  CreativeSession[]
  inspirations      Inspiration[]
  fanProfiles       FanProfile[]
  conversationThreads ConversationThread[]

  @@index([name])
}

model Milestone {
  id           String   @id @default(uuid())
  artistId     String
  date         DateTime
  title        String
  description  String
  type         String   // MilestoneType enum
  significance Int      // 1-10

  // Relations
  artist ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@index([artistId])
  @@index([date])
}

// ============================================================================
// Neural Palette (Content Management)
// ============================================================================

model Content {
  id          String   @id @default(uuid())
  artistId    String
  title       String
  description String
  type        String   // ContentType enum
  status      String   // ContentStatus enum
  publishedAt DateTime?

  // Metadata (JSON)
  metadata String // ContentMetadata JSON

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  // Relations
  artist         ArtistDNA      @relation(fields: [artistId], references: [id], onDelete: Cascade)
  tags           Tag[]
  mediaFiles     MediaFile[]
  collaborators  Collaborator[]
  distributions  Distribution[]
  socialPosts    SocialPost[]
  rights         Right[]
  infringements  Infringement[]

  @@index([artistId])
  @@index([type])
  @@index([status])
}

model Tag {
  id        String   @id @default(uuid())
  contentId String
  name      String
  category  String?

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
  @@index([name])
}

model MediaFile {
  id           String   @id @default(uuid())
  contentId    String
  filename     String
  mimeType     String
  size         Int
  url          String
  thumbnailUrl String?
  uploadedAt   DateTime @default(now())

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model Collaborator {
  id        String  @id @default(uuid())
  contentId String
  name      String
  role      String
  email     String?

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

// ============================================================================
// Neural Publisher (Distribution Management)
// ============================================================================

model Distribution {
  id          String   @id @default(uuid())
  contentId   String
  artistId    String
  title       String
  status      String   // DistributionStatus enum
  scheduledDate DateTime?
  publishedDate DateTime?
  description   String?
  tags          String   // JSON array
  isExplicit    Boolean  @default(false)

  // Metadata
  platforms String   // JSON array of PlatformConfig

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  // Relations
  artist ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  events DistributionEvent[]

  @@index([artistId])
  @@index([contentId])
  @@index([status])
}

model DistributionEvent {
  id             String   @id @default(uuid())
  distributionId String
  platform       String?
  eventType      String   // DistributionEventType enum
  status         String   // DistributionStatus enum
  message        String?
  metadata       String?  // JSON object
  timestamp      DateTime @default(now())

  // Relations
  distribution Distribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)

  @@index([distributionId])
  @@index([timestamp])
}

// ============================================================================
// Neural Connector (Social Media Integration)
// ============================================================================

model SocialConnection {
  id             String   @id @default(uuid())
  artistId       String
  platform       String   // SocialPlatform enum
  accountId      String
  accountName    String
  isActive       Boolean  @default(true)

  // Authentication (encrypted in production)
  accessToken    String?
  refreshToken   String?
  tokenExpiresAt DateTime?

  // Stats
  followerCount  Int?
  lastSyncedAt   DateTime?

  // Timestamps
  connectedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artist ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@index([artistId])
  @@index([platform])
}

model SocialPost {
  id          String   @id @default(uuid())
  artistId    String
  contentId   String?
  type        String   // PostType enum
  content     String
  mediaUrls   String   // JSON array
  platforms   String   // JSON array of SocialPlatform
  status      String   // PostStatus enum
  scheduledAt DateTime?
  postedAt    DateTime?

  // Platform Posts & Engagement
  platformPosts String   // JSON array of PlatformPost
  engagementStats String // JSON EngagementStats

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  // Relations
  artist  ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)
  relatedContent Content? @relation(fields: [contentId], references: [id], onDelete: SetNull)

  @@index([artistId])
  @@index([contentId])
  @@index([status])
}

// ============================================================================
// Neural Sentinel (Rights Protection)
// ============================================================================

model Right {
  id                 String   @id @default(uuid())
  contentId          String
  artistId           String
  rightType          String   // RightType enum
  rightHolder        String
  rightHolderContact String?
  licenseType        String   // LicenseType enum
  licenseTerms       String?
  startDate          DateTime
  endDate            DateTime?
  territories        String   // JSON array of ISO country codes

  // Registration
  registrationNumber String?
  isrcCode           String?
  iswcCode           String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  // Relations
  artist       ArtistDNA     @relation(fields: [artistId], references: [id], onDelete: Cascade)
  content      Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
  infringements Infringement[]

  @@index([artistId])
  @@index([contentId])
  @@index([rightType])
}

model Infringement {
  id               String   @id @default(uuid())
  rightId          String
  contentId        String
  artistId         String
  status           String   // InfringementStatus enum
  detectedUrl      String
  detectedPlatform String
  description      String
  detectedAt       DateTime @default(now())
  detectionMethod  String   // 'manual' | 'automated' | 'user_report'
  confidence       Int      // 0-100

  // Action
  recommendedAction String   // ActionType enum
  actionTaken       String?  // ActionType enum
  actionDate        DateTime?
  actionNotes       String?

  // Resolution
  resolvedAt DateTime?
  resolution String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  // Relations
  artist  ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)
  content Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  right   Right     @relation(fields: [rightId], references: [id], onDelete: Cascade)

  @@index([artistId])
  @@index([contentId])
  @@index([rightId])
  @@index([status])
}

model MonitoringRule {
  id              String   @id @default(uuid())
  artistId        String
  name            String
  isActive        Boolean  @default(true)
  contentIds      String   // JSON array
  platforms       String   // JSON array
  keywords        String   // JSON array
  autoAction      String?  // ActionType enum
  notifyEmail     String?
  lastRunAt       DateTime?
  totalDetections Int      @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artist ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@index([artistId])
  @@index([isActive])
}

// ============================================================================
// Neural Muse (AI Creative Support)
// ============================================================================

model CreativeSession {
  id          String   @id @default(uuid())
  artistId    String
  contentId   String?
  title       String
  type        String   // CreativeType enum
  status      String   // SessionStatus enum
  description String?

  // AI Settings
  defaultParams String   // JSON GenerationParams

  // Progress
  totalGenerations Int      @default(0)
  selectedCount    Int      @default(0)

  // Timestamps
  startedAt    DateTime @default(now())
  lastActiveAt DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  version      Int      @default(1)

  // Relations
  artist      ArtistDNA          @relation(fields: [artistId], references: [id], onDelete: Cascade)
  generations GenerationResult[]
  inspirations Inspiration[]

  @@index([artistId])
  @@index([type])
  @@index([status])
}

model GenerationResult {
  id        String   @id @default(uuid())
  sessionId String
  type      String   // CreativeType enum
  prompt    String
  result    String
  params    String   // JSON GenerationParams

  // Metadata
  tokensUsed Int
  model      String
  confidence Int?     // 0-100

  // User Feedback
  rating     Int?     // 1-5
  feedback   String?
  isSelected Boolean  @default(false)

  // Timestamps
  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  session CreativeSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([type])
  @@index([isSelected])
}

model Inspiration {
  id        String  @id @default(uuid())
  artistId  String
  sessionId String?
  title     String
  content   String
  type      String  // CreativeType enum
  source    String?
  tags      String  // JSON array

  // Usage
  usedInContent String?  // JSON array of content IDs

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artist  ArtistDNA        @relation(fields: [artistId], references: [id], onDelete: Cascade)
  session CreativeSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@index([artistId])
  @@index([sessionId])
  @@index([type])
}

model PromptTemplate {
  id            String  @id @default(uuid())
  artistId      String?
  name          String
  description   String?
  type          String  // CreativeType enum
  template      String
  variables     String  // JSON array
  exampleValues String? // JSON object
  defaultParams String  // JSON GenerationParams

  // Stats
  usageCount Int     @default(0)
  avgRating  Float?

  // Meta
  isPublic  Boolean @default(false)
  tags      String  // JSON array
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([isPublic])
}

// ============================================================================
// Neural Echo (Fan Interaction AI)
// ============================================================================

model FanProfile {
  id         String   @id @default(uuid())
  artistId   String
  displayName String
  externalId String?
  platform   String?
  email      String?

  // Interaction History
  firstInteractionAt DateTime @default(now())
  lastInteractionAt  DateTime @default(now())
  totalInteractions  Int      @default(0)

  // Analysis
  sentimentHistory String  // JSON array of SentimentType
  avgSentiment     String  // SentimentType enum
  topics           String  // JSON array
  preferredChannel String? // ConversationChannel enum

  // Engagement
  isVIP            Boolean @default(false)
  engagementScore  Int     @default(0) // 0-100

  // Meta
  tags      String   // JSON array
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artist  ArtistDNA             @relation(fields: [artistId], references: [id], onDelete: Cascade)
  threads ConversationThread[]

  @@index([artistId])
  @@index([platform])
  @@index([isVIP])
}

model ConversationThread {
  id       String  @id @default(uuid())
  artistId String
  fanId    String
  channel  String  // ConversationChannel enum
  subject  String?
  status   String  // ResponseStatus enum
  priority String  // ConversationPriority enum

  // Messages (stored in separate model)
  messageCount Int @default(0)

  // Analysis
  sentiment           String  // SentimentType enum
  topics              String  // JSON array
  requiresHumanReview Boolean @default(false)

  // Timestamps
  startedAt     DateTime  @default(now())
  lastMessageAt DateTime  @default(now())
  resolvedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  artist   ArtistDNA @relation(fields: [artistId], references: [id], onDelete: Cascade)
  fan      FanProfile @relation(fields: [fanId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([artistId])
  @@index([fanId])
  @@index([status])
  @@index([priority])
}

model Message {
  id       String   @id @default(uuid())
  threadId String
  role     String   // 'fan' | 'ai' | 'artist'
  content  String
  sentiment   String?  // SentimentType enum
  confidence  Int?     // 0-100

  // AI Generation Info
  generatedPrompt String?
  model           String?
  tokensUsed      Int?

  // Feedback
  rating          Int?     // 1-5
  wasEdited       Boolean  @default(false)
  editedContent   String?
  rejectionReason String?

  // Meta
  metadata  String?  // JSON object
  timestamp DateTime @default(now())

  // Relations
  thread ConversationThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([role])
  @@index([timestamp])
}

model ResponseTemplate {
  id          String  @id @default(uuid())
  artistId    String?
  name        String
  description String?
  category    String
  template    String
  variables   String  // JSON array

  // Usage Conditions
  triggerKeywords String?  // JSON array
  sentiment       String?  // SentimentType enum
  channel         String?  // ConversationChannel enum

  // Stats
  usageCount Int    @default(0)
  avgRating  Float?

  // Meta
  isActive  Boolean @default(true)
  tags      String  // JSON array
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isActive])
}

model ResponseConfig {
  id       String  @id @default(uuid())
  artistId String  @unique

  // Basic Settings
  isEnabled   Boolean @default(true)
  autoApprove Boolean @default(false)
  autoSend    Boolean @default(false)

  // Filters
  minConfidence   Int    @default(70) // 0-100
  channelSettings String // JSON object

  // Response Style
  tone               String @default("friendly")
  maxResponseLength  Int    @default(500)
  useEmojis          Boolean @default(true)

  // Rate Limits
  maxResponsesPerDay Int?
  maxResponsesPerFan Int?

  // Notifications
  notifyOnNewMessage Boolean @default(true)
  notifyEmail        String?

  // Meta
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  @@index([artistId])
}
